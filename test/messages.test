#!/bin/sh -fu

if ! which shunit2 > /dev/null; then
  echo "shunit2 not found in PATH. Aborting tests"
  exit 2
fi

. $(dirname $0)/../libshell-assertions
. $(dirname $0)/../libshell-messages

testVerbose() {
  assertEquals "Verbose is on:" "VERBOSE: foobar" "$(VERBOSE=1 verbose foobar 2>&1 )" 
  assertNull "Verbose is off:" "$(unset VERBOSE verbose foobar 2>&1 )"
  assertNull "Verbose does not go to stdout:" "$(VERBOSE=1 verbose foobar 2> /dev/null )"
}

testWarning() {
  assertEquals "Warning message" "WARNING: foobar" "$(warning foobar 2>&1)"
  assertNull "Warning does not go to stdout" "$(warning foobar 2>/dev/null )"
}

testMessage() {
  assertEquals "Message" "messages.test: foobar" "$(message foobar)"
  assertEquals "Message" "foo: bar" "$(PROG=foo message bar)"
}

### You can't test fail() with the help of shunit2 so testing that manually
echo "testFail"

unset EXITCODE
( fail foobar 2> /dev/null ) && EXITCODE="$?" || EXITCODE="$?" ||:
EXITCODE=${EXITCODE:-$?}
assert "Exit code" 1 "${EXITCODE}"

unset EXITCODE
( FAILWITH=2 fail foobar 2> /dev/null ) && EXITCODE="$?" || EXITCODE="$?" ||:
EXITCODE=${EXITCODE:-$?}
assert "Exit code" 2 "${EXITCODE}"

MESSAGE="$( (fail foobar 2>&1) ||: )" 
assert "Message" "ERROR: foobar" "${MESSAGE}" ||:

MESSAGE="$( (fail foobar 2>/dev/null) ||: )"
assert "Stdout output" "" "${MESSAGE}" ||:
### ...until here


. shunit2
